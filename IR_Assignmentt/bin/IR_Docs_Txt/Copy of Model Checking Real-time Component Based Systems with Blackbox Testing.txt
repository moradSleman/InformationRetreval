See discussions, stats, and author profiles for this publication at: https://www.researchgate.net/publication/4193660

Model checking real-time component based systems with blackbox testing
Conference Paper · September 2005
DOI: 10.1109/RTCSA.2005.59 · Source: IEEE Xplore

CITATIONS

READS

21

14

2 authors:
Hung Dang Van

Bui Vu Anh

Vietnam National University, Hanoi

Vietnam National University, Hanoi

104 PUBLICATIONS 606 CITATIONS

10 PUBLICATIONS 31 CITATIONS

SEE PROFILE

All content following this page was uploaded by Bui Vu Anh on 07 March 2016.
The user has requested enhancement of the downloaded file.

SEE PROFILE

Model Checking Real-time Component Based Systems with Blackbox Testing
Dang Van Hung and Bui Vu Anh
United Nations University, International Institute for Software Technology
P. O. Box 3058, Macau
e-mail: {dvh,bva}@iist.unu.edu

Abstract

to consist of one host which is a general duration automaton and several components which are duration automata
with some restrictions. Components can communicate with
their host only. For this model we propose an algorithm for
solving the emptiness problem, which plays the key role for
checking the safety of the system, using black-box testing
for components with a complexity in the same complexity
class as for solving the emptiness problem for untimed component based systems.

In this paper we propose a simple model for component based real-time systems using duration automata. For
this simple model we propose an algorithm for solving the
emptiness problem using black-box testing for components
which is in the same complexity class as for solving the
emptiness problem for untimed component based systems.
Furthermore, the verification of behavioural real-time properties in this model can be done with techniques from Duration Calculus.
Keywords: Component Software, Duration Automata,
Automatic Verification, Real-time Systems.

2. Component Based Real-time System Model
Interface automata were introduced in [2] for specifying
component interfaces. We extend interface automata to interface duration automata by associating to each action a
simple constraint on action duration in the form of time interval. Let R be the set of non negative real numbers, and
Intv be the set of time intervals, Intv =
b {[a, b] | τ1 ∈ R, τ2 ∈
R ∪ {∞}}.

1. Introduction
The component-based system development supports
software reuse and compositionality, hence can reduce the
cost for the products. In component based software development, the architectural design of the system plays a key
role in achieving the correctness of the system. Architectures include not only the structure of the system but also the
behaviour and non-functional aspects of the system. Many
models for component based systems have been proposed in
the literature [5, 4]. However, those models mainly support
the system specifications and understanding, not the verification.
Very often the embedded systems have a simple structure, but complicated real-time behaviours. The architectural design for embedded systems often relies on a minimum specification of component interfaces only, without
accessing to the internal behaviour of components. In this
paper we propose a simple model for component based realtime systems using duration automata. A duration automaton does not have clock variable like timed automata [1],
but has a simple upper bound and lower bound for each
transition. It has been shown that many duration properties of real-time systems can be verified automatically for
this model. We define a component based real-time system

Definition 1 An interface duration automaton is a tuple
M = hS, Σ, ∆, ∇, q, R, F i, where
1. S is a finite set of states,
2. Σ, ∆ and ∇ are pairwise disjoint alphabets of internal,
input and output actions respectively,
3. q ∈ Q is initial state of M ,
4. R ⊆ S × (Σ ∪ ∆ ∪ ∇) × Intv × S is timed transition
relation, and
5. F ⊆ S is set of final states.
For simplicity, for a duration interface automaton M , we
will use S(M ), Σ(M ), ∆(M ), ∇(M ), R(M ), q(M ) and
F (M ) to denote the corresponding components of M as in
the above definition. The untimed version of M , denoted
by untimed(M ) is the untimed automaton defined in the
same way as M except that the transition relation is defined
by untimed(R) =
b {(s, a, s0 ) | (s, a, [l, u], s0 ) ∈ R}. Let
1

A(M ) =
b Σ(M )∪∆(M )∪∇(M ). A configuration of M is
a pair (s, d) ∈ S×R. A configuration (s, d) says that M has
been in state s for d time units. So, the initial configuration
of M is (q, 0), and an acceptance configuration of M is a
configuration (s, d) where s ∈ F . A transition of M is

For a behaviour σ, let w(σ) be a timed word defined by
Pi
w(σ) =
b (a1 , t1 )(a2 , t2 ) . . . (an , tn ), where ti =
b
j=1 δj .
w(σ) is called timed word of the system S if the last configuration of σ is an acceptance configuration of S. Let L(S)
denote the set of timed words of the system S.
A subsystem of S is a subset of {M1 , . . . , Mk }.

δ

either a time transition of the form (s, d) −→ (s, d + δ)
(δ ∈ R and δ ≥ 0) or a discrete transition of the form
a
(s, d) −→ (s0 , 0), where a ∈ Σ∪∆∪∇, (s, a, [l, u], s0 ) ∈ R
and l ≤ d ≤ u. In words, a discrete transition can take place
only if the amount of time it has been enabled, i.e. staying
in the source state, satisfies the time constraint associated to
it.

Theorem 1 Let S0 be a subsystem of S. A timed word w
over A(S) is a timed word of S if and only if w|A(S0 ) is a
timed word of S0 and w|A(S−S0 ) is a timed word of S − S0 .
The emptiness problem for a system plays the key role
in checking the safety. From the obvious corresponding of
component systems and timed automata, it follows that the
emptiness of the set of timed words of a system S is decidable, but has very high complexity.
We will see in the next section that with some restrictions
that are appropriate for modeling component based systems,
we can solve the problem with much lower complexity.
Now, we extend the system model in [3] for untimed
component based systems to model component-based realtime systems. The advantage of this model is its simplicity
and ability of verifying some properties of a system with
not much information from the used components.
Real-time components will be modeled by duration interface automata with some restrictions. The restrictions
come from the way the developers are using components.
We assume that there is a special input action “reset” which
causes the component to return to its initial state. If the
component accepts an input at a state s then it is its up to
environment to decide when to send the input. Therefore
we assume that there is no time constraint for input actions,
i.e. in any input transition (s, a, [l, u], s0 ) satisfies that l = 0
and u = ∞. Like for the model in [3], we also assume the
input determinism and output determinism for components
for more predictable behaviours.

Let M1 , M2 , . . . , Mk be duration interface automata.
They are said to be composable iff ∆(Mi ) ∩ ∆(Mj ) =
∇(Mi )∩∇(Mj ) = ∅ for all i 6= j, and Σ(Mi )∩A(Mj ) = ∅
for all i 6= j. A finite set of composable duration interface automata S =
b {M1 , M2 , . . . , Mk } is called a (realtime) system. The components of S are running in parallel
and communicate with one another synchronously provided
their own time constraints are satisfied.
A configuration of system S is a tuple C =
b
(c1 , c2 , . . . , ck ), where ci is a configuration of Mi . The
configuration of S in which ci is the initial configuration
of Mi for all i ≤ k, is called the initial configuration of
S. An acceptance configuration of S is a configuration in
which ci is an acceptance configuration of Mi for all i.
For a ∈ ∪ki=1 A(Mi ), let dom(a) =
b {i | a ∈ A(Mi )}.
We combine a time transition with a following discrete
transition into one and define the transition relation of S
(δ,a)
as: ((s1 , d1 ), . . . , (sk , dk )) −→ ((s01 , d01 ), . . . , (s0k , d0k )) for
δ ≥ 0 and a ∈ ∪ki=1 A(Mi ) iff for all i ∈ dom(a) there is an
interval [li , ui ] ∈ Intv such that (si , a, [li , ui ], s0i ) ∈ R(Mi ),
di + δ ∈ [li , ui ] and (s0i , d0i ) = (si , 0), and if i 6∈ dom(a)
then (s0i , d0i ) = (si , di + δ).
A path p of S is a sequence of consecutive transitions

Definition 2 A component is a duration automaton
X = hS, Σ, ∆, ∇, q, R, F i that satisfies the following conditions:

(δi ,ai )

Ci−1 −→ Ci , i = 1, . . . , n. A path such that C0 is the
initial configuration of S is called a behaviour. We denote a
(δ1 ,a1 )

(δ2 ,a2 )

(δn ,an )

behaviour of S by σ =
b C0 −→ C1 −→ C2 . . . −→
(δ1 ,a1 )

(δ2 ,a2 )

1. Σ = ∅ and reset ∈ ∆ (no “explicit” internal action),

(δn ,an )

Cn . Let p be a path C0 −→ C1 −→ C2 . . . −→ Cn .
A configuration C is reachable from C0 in d time units on
the path p iff there are i and δ satisfying that i < n ∧ δi+1 ≥
Pi
δ
δ ≥ 0 or i = n ∧ δ ≥ 0 such that Ci −→ C and j=1 δ =
d.

2. (s, a, [l, u], s0 ) ∈ R ∧ a ∈ ∆ implies l = 0 ∧ u = ∞,
3. (s, reset, [0, ∞), q) ∈ R for all s ∈ S,
4. ((s, a, [l, u], s0 ) ∈ R) ∧ (a ∈ ∇) implies u = ∞, i.e.
when an output is ready, it can be taken at any time
afterward.

For an alphabet A, a timed string (word) over A is a sequence w =
b (a1 , t1 )(a2 , t2 ) . . . (ak , tk ), where ai ∈ A and
ti ∈ R for i ≤ k, and 0 ≤ ti ≤ ti+1 for 1 ≤ i ≤ k − 1. Let
B ⊆ A. We expand the projection .|B for strings to a projection for timed strings .|B as: for a timed string w, w|B is
the subsequence of w consisting of those (aj , tj ) for which
aj ∈ B.

5. (input determinism) for a ∈ ∆, (s, a, [0, ∞), s0 ) ∈ R
and (s, a, [0, ∞), s00 ) ∈ R imply s00 = s0 ,
6. (output determinism) for b ∈ ∇ and b0 ∈ ∇ ∪ (∆ \
{reset}), (s, b, [l, ∞), s0 ) ∈ R∧(s, b0 , [l0 , u0 ], s00 ) ∈ R
implies s00 = s0 , l0 = l, u0 = ∞ ∧ b = b0 .
2

of the unique output action of Xi at state s0 with label aj ,
i.e. (s0 , aj , [dj , ∞), s00 ) ∈ R(Xi ).

Since the final states of components play no role in our
model according to the way components are used, we assume that for any component X, we have F (X) = S(X),
i.e. every state of a component is an acceptance state.
A host is simply a duration interface automaton M .

Hence, a more efficient algorithm for deciding the emptiness of a component based real-time system than the general algorithm for timed automata can be constructed by
searching for an acceptance sequence of the host M with
the length not longer than P that satisfies the conditions of
Theorem 2. Note that these conditions can be verified by
black box testing as presented in the next subsection.

Definition 3 A component based real-time system S is a
system consisting of one host and several components S =
b
hM, X1 , . . . , Xk i, where M is a host, and X1 , . . . , Xk are
components satisfying A(Xi ) ∩ A(Xj ) = ∅ for i 6= j, and
∆(M ) ∪ ∇(M ) = ∪ki=1 A(Xi ).

3. Model-Checking Component Based Systems
with Black-box Testing

Since the alphabets of components are included in the
alphabet of the host, it follows from Theorem 1 that a timed
word w of a component based system S is also a timed word
of the host M .However, the statement in the reverse direction does not necessarily hold in general. We can decide
if a timed word of M is also a timed word of the system
S by testing if we are given a limited specification of each
component of S.
Let σ be an accepted behaviour of the host M . The sequence [σ] =
b (a1 , [l1 , u1 ]) . . . (an , [ln , un ]) is called an accepted sequence of transitions of M .
Let r be the number of states of M , and m is the maximal number of states of components Xj , j ≤ k. Let
untimed(S) =
b M × untimed(X1 ) × . . . × untimed(Xk )
be the synchronised product of the untimed automata corresponding to the host M and the components Xj ’s. The
number of states of untimed(S) is bounded by r ∗ mk , and
from the definition of the synchronised products it follows
that each transition in untimed(S) is a parallel execution
of a communication transition in M and a transition in a
component with the same label, or an internal transition in
M.
We have the following criterion for the emptiness of realtime component based systems in our model. Let P be the
length of the longest path (number of transitions) from the
initial state to an acceptance state of M in which any cycle
is not repeated more than r ∗ mk times for each time it is
entered.

A component is regarded as a black box, and its
behaviour can only be determined by observing its input/output sequence with a clock. We assume that when
the output action is tested, the lower bound for the delay of
the transition is also reported in the result. Our assumptions
for black box testing real-time component X are:
(a) Whenever X is sent an input symbol in ∆(X), it immediately outputs a special symbol (not in ∇) “yes” or “no” to
indicate whether the input is accepted or not.
(b) X has a special input symbol (not in ∆(X)) “prob”
that always makes X, when its current state is s, execute
a unique output transition (s, b, [d, ∞), s0 ) if such action
exists (i.e. b and d are observable), and “no” if otherwise. So, send(X,”prob”) returns “no” if output transition
(s, b, [d, ∞), s0 ) does not exist, and (b, d) otherwise.
The following algorithm describes our black box testing
∗
procedure. Let X be a component, w ∈ A(X) , let wj
denote the jth element of w. We also assume that a variable dX records the value of the minimal delay d of the last
output symbol b in w when the black box test on w is successful (dX is introduced just for serving the purpose of the
algorithm for checking the emptiness of component based
system presented below).
BlackboxTest(X,w)
send “reset” to X;
for(j := 0, j < |w|, j + +)
if wj is an input symbol
if send(X,wj ) = “no” return “no”;
if wj is an output symbol
if send(X,”prob”) = (b, d)
if wj 6= b return “no”;
if wj = b dX := d;
if send(X,”prob”) = “no” return “no”;
return “yes”

Theorem 2 The set of timed words of the real-time component based system S is not empty if and only if there is
an accepted sequence of transitions of the host M [σ] =
(a1 , [l1 , u1 ]) . . . (an , [ln , un ]) with the length n ≤ P such
that for its corresponding untimed word w =
b a1 a2 . . . an
the word w|A (Xi ) is accepted by untimed(Xi ) for all
i ≤ k and for all j = 1, . . . , n, if aj ∈ ∇(Xi ) for some
i then either uj + . . . + uh+1 ≥ dj or there is a positive
cycle on the path from h + 1 to j − 1 with the length not
greater than r ∗ mk , where h is the largest index less than
a1 ...ah |A(X

The emptiness of a component based real-time system in
our model can be solved by the the following testing procedure. Let for a sequence of transition w, label(w) denote
the sequence of the labels corresponding to the sequence w.

)

j such that ah ∈ A(Xi ), and q(Xi )
−→ i s0 holds in
the automaton untimed(Xi ), and dj is the minimum delay
3

View publication stats

Input: Component based system S =
b hM, X1 , . . . , Xk i

phabet of the system S. This time complexity does not depend on the size of the constants occurring in the constraints
for the transitions.
It is well-known that the reachability and safety problem
can be reduced to the emptiness problem, and hence can be
solved with the technique in the previous section. Let S =
b
hM, X1 , . . . , Xk i be a component based real-time system.
Let Bad be a subset of the state set of M . We have to check
if states in Bad are not reachable. Let M 0 be M with the
set of final states being replaced by Bad. States in Bad are
not reachable in S iff the set of timed words of the system
S0 = hM 0 , X1 , . . . , Xk i is empty.
The host M of a system S =
b hM, X1 , . . . , Xk i is designed to satisfy some real-time requirements. Because M
is just a duration interface automaton, it is much easier to
verify if M satisfies a real-time property than to do it for
a timed automaton. In order to achieve its functionality,
M uses services from components Xj , j ≤ k. However,
if the time performance of Xj is low, then S may not be
implementable. Therefore, the emptiness testing algorithm
presented above can be used to decide whether the time performance of Xj ’s is acceptable for S.

Output: “Yes” if the set of the timed words of S is not
empty, “No” otherwise.
Method:
(1) Compute P , the length of the longest path (number
of transitions) from the initial state to an acceptance
state of M in which any cycle is not repeated more
than r ∗ mk times for each time it is entered, by using
a searching technique in the graph of M .
(2) Generate all acceptance sequences of transitions of
M with length P in a systematic way (e.g. by breadth
first searching);
(3) Checking on-the-fly whether any prefix of a generated sequence satisfies the conditions of Theorem 2.
This can be done by:
(i) For each prefix of a generated sequence
w
=
e1 e2 . . . en , for each i
≤
n let
ei = (si−1 , aj , [li , ui ], si ). For j ≤ k let mj (w) be
the largest index of w such that amj ∈ A(Xj ) if it
exists,
Pnotherwise, let mj (w) = 0. Let deadlinej (w)
be h=mj +1 uh (mj (w) and deadlinej (w) can be
maintained properly).
(ii) If the label a of en+1 belongs to ∆(Xj), then if
BlackboxTest(Xj , label(w)|A(Xj ) ) = “no”, wen+1
does not satisfy the conditions of Theorem 2. Otherwise, update w := wen+1 , mj (w) := n + 1,
deadlinej (w) := 0.
(iii) If the label a of en+1 belongs to ∇(Xj).
If BlackboxTest(Xj , label(w)|A(Xj ) ) = “yes”, let d
be the value of dXj .
(a) If deadlinej (w) + un+1 < d: Verify if there is a
positive allowable cyclic path between mj (w) + 1 and
n. If such path does not exit, then wen+1 does not satisfy the conditions of Theorem 2. Otherwise, update
w := wen+1 , mj (w) := n + 1, deadlinej (w) := 0.
(b) If deadlinej (w) + un+1 ≥ d: The conditions
of Theorem 2 are satisfied; update w := wen+1 ,
mj (w) := n + 1,
deadlinej (w)
:=
0, deadlinej 0 (w)
:=
deadlinej 0 (w) + un+1 for j 0 6= j.

4. Conclusion
We have presented a model for component-based realtime systems which has some advantages over the models
in the literature. The main advantage is that it supports the
black box testing for checking the emptiness with nearly the
same cost as for untimed component-based systems. Actually, from the simplicity of the proposed architecture of systems we can have a lower complexity, but this would need a
more complicated analysis. We also propose a simple technique for the verification of Real-time properties written as
a formula in some real-time logic for our model. We believe
that although our model is simple, it is good for the modelling and verification of many embedded real-time systems
in practice.

References
[1] R. Alur and D. Dill. A Theory of Timed Automata. Theoretical Computer Science, pages 183–235, 1994.
[2] L. de Alfaro and T. A. Henzinger. Interface Automata. In
ACM Symposium on Foundation of Software Engineering
(FSE), 2001.
[3] Z. D. Gaoyan Xie. Model-checking driven black-box testing algorithms for systems with unspecified components. In
CoRR cs.SE/0404037, Electronic Edition (link), April 2004.
[4] D. V. Hung. A Model for Component Interfaces for Real-time
Systems. Technical Report 296, UNU-IIST, 2004. .
[5] H. Jifeng, Z. Liu, and L. Xiaoshan. Contract-Oriented Component Software Development. Technical Report 276, UNUIIST, 2003.

If BlackboxTest(Xj , label(w)|A(Xj ) ) = “no”, the
conditions of Theorem 2 are not satisfied. (iv) If the label a of en+1 does not belong to ∪j≤k A(Xj), update
w := wen+1 , deadlinej (w) := deadlinej (w)+un+1
for j ≤ k.
(4) If a generated sequence satisfying the conditions of
Theorem 2 is found, returns with “Yes”. Otherwise,
return with “No”.
The time complexity for the worst cases of this algorithm
is of O(P 2 ∗ |A(S)|P +1 ), where |A(S)| is the size of the al4

