Available online at www.sciencedirect.com

ScienceDirect
Procedia Computer Science 22 (2013) 551 – 560

17th International Conference in Knowledge Based and Intelligent Information and Engineering Systems KES2013

A Test Analysis Method for Black Box Testing Using AUT and Fault
Knowledge
Tsuyoshi Yumotoa* , Toru Matsuodanib, Kazuhiko Tsudac

a
Hewlett-Packard Japan, 2-2-1 Ojima Koto-ku, Tokyo 136-8711, Japan
Debug engineering research laboratory, 4-16-1 Hijirigaoka Tama-shi, Tokyo 206-002, Japan
c
University of Tsukuba, 3-29-1 Otsuka Bunkyo-ku, Tokyo 112-0012, Japan

b

Abstract

With a rapid increase in size and complexity of software today, the scope of software testing is also
expanding. The efficiency of software testing needs to be improved in order to ensure the appropriate delivery
deadline and cost of software development. For improving efficiency of software testing, the test needs to be
designed in a way that the number of test cases is sufficient and appropriate in quantity. Test analysis is the
activity to refine Application Under Test (AUT) into proper size that test design techniques can be applied to. It
is for designing the test properly. However, the classification for proper size depends on individual’s own
judgments. This paper proposes a test analysis method for the black box testing using a test category that is the
classification based on fault and AUT knowledge.
© 2013 The Authors. Published by Elsevier B.V. Open access under CC BY-NC-ND license.
Selection and peer-review under responsibility of KES International
International.
Keywords: Software testing; Test Analysis; Test condition; Test category

1. Introduction
Software testing is the main technology to ensure the quality of the software. With a rapid increase in size
and complexity of software today, the scope of software testing is also expanding. There is a survey that
indicates 45% of development cost is spent on software testing [1]. Therefore, the efficiency of software testing
needs to be improved in order to ensure the appropriate delivery deadline and cost of software development.
For improving efficiency of software testing, the test needs to be designed in a way that the number of test

*

Corresponding author. Tel.: +81-3-5628-1528; fax:+81-3-6388-2455.
E-mail address:Tsuyoshi.yumoto@hp.com.

1877-0509 © 2013 The Authors. Published by Elsevier B.V. Open access under CC BY-NC-ND license.
Selection and peer-review under responsibility of KES International
doi:10.1016/j.procs.2013.09.135

552

Tsuyoshi Yumoto et al. / Procedia Computer Science 22 (2013) 551 – 560

cases is sufficient and appropriate in quantity. The test design can be divided into two approaches. One is a
white box testing, which is a test design based on the structure, and the other is a black box testing, which is a
test design based on the specifications of a software [2]. White box testing is based on Application Under Test
(AUT) such as source code. Therefore, specific items that are covered in the testing can be selected similarly as
the lines and decisions of the programs are covered. Many types of coverage criteria have been proposed as test
design techniques. On the other hand, black box testing is based on a specification that describes the behavior
and operating conditions of AUT. Many types of coverage criteria for specification have been proposed as test
design techniques as well.
When performing test design, it is necessary to refine the size of AUT that test design techniques can be
applied to. This activity is called test analysis. However, test analysis for black box testing is often not
consistent in its refinement, and some of the test cases are often lacking or overlapping. This paper proposes a
test analysis method for the black box testing using a test category and the classification based on fault and
AUT knowledge.
2. Issues of Test Analysis in Black Box Testing
2.1. Development Lifecycle and Test
T Process
Software testing is performed in multiple verification levels during the development life-cycle. These
verification levels are depicted in Fig. 1 by the V model, which is a technically focused cycle model [3]. This
proposal will focus on the black box testing performed at the system-level verification, enclosed in a red frame.
This is because the system-level is where the effects caused by the increase in size and complexity of software
are greatest.


Fig. 1. V model (Forsberg,1995 et.al[3])

Fig. 2. Testing process and test development process

Tsuyoshi Yumoto et al. / Procedia Computer Science 22 (2013) 551 – 560

Testing performed at each level depicted in V model has a process similar to the development process,
respectively [4]. In the testing process, the test planning is performed in parallel with the activities on left side
of the V model as shown in Fig. 2. Then, test analysis, test design, and test implementation are performed in
chronological order. Finally, in the activities on right side of the V model, test execution and evaluating exit
criteria are performed. In addition, three activities, test analysis, test design, and test implementation in the
testing process are also called Test development process [5].
2.2. Test Analysis
Underlying specifications to test design for black box testing are artifacts on left side of the V model shown
in Fig. 1. These are called test basis. The “System Performance Specification” in Fig. 2 is the test basis of the
level in the V model covered in this proposal. However, the specification documents are normally written for
subsequent processes such as designing and coding after System Performance Specification. Therefore, the
specification of one item, in which test design techniques are applied to, can be written dispersedly throughout
the document. In addition, many of descriptions are written in natural language while descriptions about the
combination of conditions as well as the sequence of conditions are insufficient. Test analysis is an activity of
selecting and organizing items to be covered by the test from the test basis described above. As shown by the
red frame in Fig. 3, the test analysis is the first activity in test development process.













Fig. 3. A test development process and its inputs and outputs

In ISTQB, test analysis is described as “During test analysis, the test basis documentation is analyzed in
order to determine what to test, i.e., to identify the test conditions. A test condition is defined as an item or
event that could be verified by one or more test cases (e.g., a function, transaction, quality characteristic or
structural element)”. Also, a test case that is to be the output of the test design is described as “a test case is
developed to cover a certain test objective(s) or test condition(s)".
2.3. Issues of Test Analysis
In ISTQB, the necessity and requirements for performing test analysis before the test design are described.
However an approach of analyzing test basis is not defined. Moreover, the test condition, which is an output of
test analysis, is a generic term for elements such as functions, transactions, quality characteristics, and structure
elements. Therefore it is necessary to structure in order to sort out relationships between each element. That is
also called test suite architecture [6]. However, in research and practice, structuring of test conditions in the test

553

554

Tsuyoshi Yumoto et al. / Procedia Computer Science 22 (2013) 551 – 560

analysis stays just experiences and heuristics. Typically, test basis is often refined sequentially from Level 1 to
Level 2 and from Level 2 to Level 3 as shown in Table 1. Because the rule is not clearly defined, each item is
classified by each individual’s own judgment. As a result, there will be a great variance in classification.
Moreover, there will be confusions where one element that is same meaning appears in multiple levels or one
element is selected in a different name.
Table 1. Examples of typical test analysis

Level1

Level2

Level3

Level4

Level5

Test conditions

Print
Setting

Setting
Print properties

Copies
General

Anomaly conditions

Error massage

In case of printing 100 copies.
Massage “print copies are over 99” is
appeared.

Examples of Table 1 contain the following issues.
x The category “Setting” appears both in Level 1 and Level 2.
x The number of levels is not constant, thus there is a variance in meaning of each level.
x The expected result is not indicated in the upper row. 
x The same specification is written on both upper and lower rows.
It is impossible to determine whether there are lacks or duplications of test cases from the Table 1 where the
test condition selected as a result of test analysis is disorganized.
3. An Approach of Test Analysis Based on Test Categories
In the approach of the test analysis method proposed in this paper, the ambiguity of the term, test condition
is eliminated by layering elements based on the test case structure. Moreover, as a hierarchical element, the test
category, which is the classification defined using knowledge of AUT and fault, is added to the structure. This
paper aims to help selecting spec items without a lack or duplication by using the test category as a guide for
test analysis.
3.1. Structure of Test Condition
In ISTQB, by test analysis, it is required that test basis is considered as an input and test condition is
considered as an output as shown in Fig. 3. Test condition can be considered as spec item from the testing point
of view. Because the spec item consists of pre-conditions, inputs, processing such as calculations, restrictions
of processing, outputs, and post-conditions, and these are equivalent of those of test condition’s shown in Fig. 4.

Fig. 4. An structure of test conditions

Tsuyoshi Yumoto et al. / Procedia Computer Science 22 (2013) 551 – 560

555

The element of a test condition can be arranged by the structure shown in Fig. 4. The ffeature that would be
tested is contained in test basis as the component. A ffeature is the aspect of the software system which a user
can observe, and it becomes an interface between user and AUT [7]. Since black box testing is the method of
the test design by external observation, selection should be start from the feature. The feature selected from
AUT for the test is called feature to be tested [8]. One or more spec items which realize the feature to be tested
are depicted by test basis. It is the spec item which defined the requirements for feature to be tested minutely,
and documented them. The spec item which should be tested is selected in test analysis. The contents of the
spec item are classified into an expected result and a test parameter like the composition of a test case, and are
arranged. A test parameter is one of the components of a test case, and it abstracts pre-inputs and pre-conditions
[9]. The test analysis in alignment with a clear rule is attained by such a classification and arrangement.
3.2. Test category
A test category is the classification that multilaterally captures a feature to be tested without omission. A test
category can be used as a guide at the time of selecting spec items for covering feature to be tested. The spec
items of feature to be tested often distribute to whole test basis, it has mentioned above in section2.2.
Therefore, since it is also the cause of the omission in selection and duplication by test analysis, guiding by test
categories become effective.

Fig. 5. An
A logical structure of feature
f
(Sakuhei Omura,2005 [10])
Table 2. A
An example of test categories

Logical Structure

Test categories

Input adjustment

UI input

Output adjustment
Conversion
Storage
Management
Support

Operation
UI display
Printing
Execution conditions
Calculation
Data search
Data Insert/Update/Delete
Reflection
Error handling

Meaning (fault assumed)
Validation rules to the input form. Screen
control
Rules of screen transition㸪Start process
Results displayed㸪Output control
Printed information㸪Format
Business rules
Fee calculation
Filter combinations㸪Search results
Data handling
Data handling reflected on other functions
Error message㸪Recovery operations

A ffeature is a conversion equipment that changes a certain input, adds value to the input and produces a new
output.
t
Therefore, it is supposed that it has structure logical certainly as shown in Fig. 5 [10]. The spec items
belonging to the feature for a test can be arranged to MECE [11] based on the structure of Fig. 5. However,

556

Tsuyoshi Yumoto et al. / Procedia Computer Science 22 (2013) 551 – 560

since Fig. 5 shows an abstract concept, a disagreement may come out of it to an interpretation. In order for a
test analysis to have a consistent interpretation at the time of selection, the test category needs to have a specific
naming and a meaning specialized in the scope of testing against an abstract concept. The knowledge of AUT
and the fault experienced in the past is used for defining the test categories. For example, in case of flight
reservation software mentioned in Table 2, the categories such as “input adjustment” is substantiated by using
“UI input”, “Storage” is substantiated by using “Search, Insert and Update and Delete” and “Conversion” is
substantiated by using “Calculation”. Moreover, when substantiating, test categories are given meanings by
listing up kinds of faults that may potentially occur. An example such as “A validation rule to the input form is
omitted in UI input” can be listed. In the example of the category of "Management" is substantiated by using
“reflected.” A fault example such as “After DB update, the changes are not reflected on other functions” can be
listed. It is based on the fault knowledge caused by the cross-functional data referencing such as in the case
where after a certain function is executed and DB data is updated, other functions refer to an updated data.
3.3. Listing and Organizing Test Conditions Using Test Categories
Spec items, expected results, and test parameters for testing the feature to be tested, these are selected from
test basis, are listed as shown in Table 3. The column headings in Table 3 are same as structure elements shown
in Fig. 4.
Table 3. A test condition list
Features to be tested
TestFuncA

TestFuncB

Test categories
TestCategoryA

Spec items
SpecItemA
SpecItemB

TestCategoryB
TestCategoryC
TestCategoryD
TestCategoryA
TestCategoryB
TestCategoryC

SpecItemC
N/A
SpecItemD
SpecItemE
N/A
SpecItemF
SpecItemG

Expected results
ExpectedResultA
ExpectedResultB-1
ExpectedResultB-2
ExpectedResultC
N/A
ExpectedResultD
ExpectedResultE
N/A
ExpectedResultF
ExpectedResultG

Test Parameters
TP1,TP2
TP1,TP3,TP4
TP1,TP4
TP5,TP6,TP7
TP5,TP6,TP7,TP8
TP9,TP10
TP2,TP4,TP6,TP7
TP6

First column indicates features to be tested, the next column shows test categories, and the third column
shows spec items. Multiplicity is according to Fig. 4.Same test categories are used for all features to be tested.
Depending on the features to be tested, spec items relevant to test categories may not exist. In that case, it
should be indicated as “N/A.” Depending on a spec item, expected results can be changed upon conditions.
Thus, it is necessary to list up multiple expected results for a spec item like Table 3. The list shown in Table 3
is called a test condition list. Expected results and spec items in which external observation is possible at the
appropriate level of verification should be listed in this table.
During the test analysis stage, appropriate test parameters can be selected from the test basis. In addition,
the test parameters that are required from standpoints of spec items’ and expected results’ should be listed. It is
more practical to select spec items and expected results before selecting parameters. There needs to be some
constraints on variation of test parameters. Or else, a wide variety of assumptions can be made although it is
not clear whether variation of test parameters to meet a certain test objectives. Thus, the constraints that would
limit a variation in test parameters to meet the objectives only should be required. Spec items and expected
results can act as constraints on test parameter selection. By only selecting required test parameters based on
the constraints, dispersion of parameters can be avoided.

Tsuyoshi Yumoto et al. / Procedia Computer Science 22 (2013) 551 – 560

557

In order to look at a whole picture of the test condition list, a test analysis matrix needs to be created. A test
analysis matrix is a matrix in which number of expected results are summarized in a table where features to be
tested are listed in row and test categories are listed in column shown as in Fig. 6. By using this matrix, it will
be easy to identify which test categories in the features to be tested have greatest or least number of tests.
TestCategoyA

TestCategoyB

TestCategoyC

TestCategoyD

TestCategoyE

TestFuncA
TestFuncB
TestFuncC
TestFuncD
TestFuncE

1
0
22
8
2

3
21
25
22
21

5
0
2
9
8

0
0
8
9
9

25
20
19
3
22

Fig. 6. A test analysis matrix

 Comparison of Test Condition Derivation Result by Test Categories Practical Use Existence
4.1. Execution Steps of Test Analysis
In order to sequentially derive test conditions, test analysis activities are divided into steps shown as in Fig.
7. Moreover, the input and output in each step are defined. Each work step is explained henceforth.



















Fig. 7. Execution steps of test analysis

558

Tsuyoshi Yumoto et al. / Procedia Computer Science 22 (2013) 551 – 560

4.1.1. <Step1>Selecting Features to Be Tested
The features to be tested should be selected from test basis. If taking flight reservation software as an
example, a flight reservation, which is a set of functional groups to complete a reservation by referring to the
boarding schedule condition that meets a demand, would be considered a feature to be tested. The judgement
on availability of a flight reservation is not considered a feature. The judgement is a function that represents an
internal implementation method such as in the case where the status flag of an available flight is updated from
“available” to “unavailable.” The judgment is considered rather as a part of features to be tested for a flight
reservation and is selected in the test analysis step 3.
4.1.2. <Step2>Designing Test Categories for Arranging Spec Items
Test categories are designed by members who are involved in a test design. The design method of test
categories is similar to the method used for setting up the subtopic in the Hierarchical Holographic Modeling
Method (HHM method) [12]. The features to be tested should be considered as head topics which are
equivalent as those of the HHM method’s. As subtopics which make up the head topic, operation conditions
and behaviors of the features to be tested should be listed per a logical structure. What kind of faults can occur
should be considered when creating a list.
After listing up subtopics against selected head topic (i.e. features to be tested), the overall subtopics should
be reviewed, the symbolic name should be given to the subtopics as a whole, and it should be made into a test
category. Among members, the contents and meanings (and/or substituted words for faults) of test categories
should be shared and understood for avoiding variation in interpretations.
Table 4. Examples of test condition list in the flight reservation software (excerpt)
Features to be tested
Flight reservation

Test categories
UI input

Operation
Print
Execution
condition

Spec items
Input range of flight
reservation

N/A
Leap year judgment

Expected results
To input from minimum date to max
date that is decided by specification.
Not to input date that is not available.
To check type and/or digit that is defined
by specification.
Screen transitions are performed along
with specification.
N/A
To check leap year judgment.

Rule of departure
and arrival

Not to select same city for departure and
arrival.

Validation check of
input fields
Screen transition

Test Parameters
Year, Month㸪Day
Year㸪Month㸪Day
Type, Digit
Status, Button
Leap year㸪Not leap
year
Departure, Arrival

4.1.3. <Step3> Selecting and Organizing Spec Items and Expected Results using Test Categories
Spec items and their expected results should be selected from the test basis. Test categories are used as a
guide for every feature to be tested when selecting them. These are organized into each test category. Table 4
depicts a part of the table created for the flight reservation software mentioned above.
4.1.4. <Step4> Selecting and Organizing Test Parameters
The test parameter is selected from the spec items and expected results which would provide useful tips to
find them. These are organized into each expected results.
4.1.5. <Step5>Checking Test Condition List Using Test Analysis Matrix
In order to check the contents of the test condition list, a test analysis matrix should be created.


559

Tsuyoshi Yumoto et al. / Procedia Computer Science 22 (2013) 551 – 560

4.2. Comparison of Test Condition Derivation Result by Test Categories practical use Existence
The workshop on test analysis was organized. Its participants were divided into 2 teams to carry out an
exercise on test analysis step 3. One team had listed spec items, expected results, and test parameters of AUT
without using test categories, and another team had listed the same with using test categories. The music
reproduction equipment was the theme of this exercise. All participants have knowledge in this equipment
through past testing experiences. The volume control of the music reproduction equipment was selected as a
feature to be tested.

Persentage

StrageB

ManagA

StrageA

Spec item Total

Management

Strage

2
0
2

OutputB

SuppB

0
0
0

OutputA

SuppA

1
0
0

Output
adjustment

Support

2
2
2

ConvB

ConvA

0
0
0

Conversion

Func A

InputA

Features to be tested

Input adjustment

Test categories

1 0 1 0 2 Suggested answers
9 100%
1 0 1 0 1 NOT using test categories
5 56%
1 0 1 0 1 Using test categories
7 78%
Using test categories-NOT using test categories =
22%

Fig. 8. Comparison of spec items selection percentage














㸺the team that did NOT use testing categories㸼
㸺the team that use testing categories㸼
Features
Number of
Number of
Features
Number of
Number of
to be tested Test categories Spec items Expected Results Test parameters
to be tested Test categories Spec items Expected Results Test parameters
Func A
InputA
N/A
N/A
N/A
Func A
InputA
N/A
N/A
N/A
ConvA
Spec item1
1
5(3)
ConvA
Spec item1
1 N/A
Spec item2 N/A
1
Spec item2
1 N/A
ConvB
Spec item3 N/A
N/A
ConvB
Spec item3 N/A
N/A
SuppA
N/A
N/A
N/A
SuppA
N/A
N/A
N/A
SuppB
Spec item4
1
2
SuppB
Spec item4 N/A
N/A
Spec item5 N/A
N/A
Spec item5
1
2
OutputA
Spec item6
1 N/A
OutputA
Spec item6
1
2
OutputB
N/A
N/A
N/A
OutputB
N/A
N/A
N/A
StrageA
Spec item7
1
3(1)
StrageA
Spec item7
1
2
StrageB
N/A
N/A
N/A
StrageB
N/A
N/A
N/A
ManagA
Spec item8 N/A
1
ManagA
Spec item8
1
1
Spec item9 N/A
N/A
Spec item9 N/A
N/A
Total
3
10(4) Total
7
9(0)
ͤ() in the coloum of test parametrs is the number of test parametors for one spec item are written dispersedly throughout the test condition list.
Ratio by Number of expected results : NOT using test categories / Using test categories =
43%
Ratio by Number of test parameters : NOT using test categories / Using test categories =
156%

Fig. 9. Results of the selection of the number of expected results and test parameters

The Fig.8 shows the comparison result of the number of spec items being selected. The numbers on the first
row are suggested answers provided by the workshop facilitator. The numbers on 2 nd and 3rd rows are answers
in the exercise by the participants during the workshop. The team that carried out an exercise with test
categories used the same set of test categories as the workshop facilitator’s. Whereas another team that
undertook an exercise without using testing categories. Then these mapped on the test categories after the
workshop. The result showed the rate of selecting spec items was higher by 22% for the team that used test
categories than for the team that did not use test categories. Furthermore, the Fig.9 shows the summary of the
numbers of expected results and test parameters, which were listed as spec items. The team that did not use test

560

Tsuyoshi Yumoto et al. / Procedia Computer Science 22 (2013) 551 – 560

categories did not clearly specify the expected results. Although the ratio of the number of expect results
without test categories to the number of them with test categories is 43%, the number of test parameters is 1.5
times higher.
From these results, it is safe to conclude that there is a high possibility of test parameters to disperse when
designing a test from test analysis results. Moreover, as much as 4/14 of all test parameters, the team that did
not use test categories had addressed test parameters that can possibly become test parameters for the same spec
item, as another spec item, when it was 0/9 for the team that used test categories. It is apparent that the test
analysis performed by this team had a higher possibility of designing duplicated test cases at the time of a test
design.
5. Conclusion
This paper proposes a test analysis method based on the rule by organizing classifications of test conditions
into knowledge using the concept of test categories. This approach aims to avoid lacks or duplications of test
cases, which often results from a test analysis and classifications of test conditions based on an individual’s
own judgments. In case of performing a test analysis against the same feature using test categories, the rate of
selecting spec items had increased more than 20%. In addition, the rate of spec items was improved when the
expected results were also selected. And the variance in descriptions was alleviated. The test analysis proposed
in this paper should serve as an asset for further development of a more effective test analysis method through a
clear definition for selecting and organizing AUT knowledge as well as faults knowledge, which are
fundamental in creating test categories.
References
[1] IPA, Report of industry actual survey for Embedded Software in 2009: METI; 2009 (In Japanese).
[2] Myers, Glenford J., Corey Sandler, and Tom Badgett. The art of software testing.: Wiley; 2011.
[3] Forsberg, K., and H. Mooz. "The relationship of systems engineering to the project cycle. " Engineering Management Journal
4.3 ;1992 p.36-43.
[4] Uetsuki Keiji, Tohru Matsuodani, and Kazuhiko Tsuda. "An efficient software testing method by decision table verification."
International Journal of Computer Applications in Technology 46.1 ; 2013, p.54-64.
[5] ISTQB FLWG. "Foundation Level Syllabus Version 2011. ": International Software Testing Qualifications Board ; 2011.
[6] Nishi, Yasuharu. "Viewpoint-based Test Architecture Design." Software Security and Reliability Companion (SERE-C), 2012 IEEE
Sixth International Conference on. IEEE; 2012, p.194- 197.
[7] Kang, Kyo C., et al. "Feature-oriented domain analysis (FODA) feasibility study. No. CMU/SEI-90-TR-21. ": CARNEGIE-MELLON
UNIV PITTSBURGH PA SOFTWARE ENGINEERING INST; 1990.
[8] IEEE ."IEEE standard for software test documentation ", IEEE829. 2008.; 2008.
[9] Tsuyoshi Yumoto,Tohru Matsuodani,Kazuhiko Tsuda. "A practical Using Method for Efficent Design of Functionai Testing": 75th
National Convention of IPSJ; 2013 , paper#5B-4 (In Japanese).
[10] Sakuhei Omura. Phenomenology of general system: gohodoshoppan; 2005 (In Japanese).
[11] Rasiel, E. M. The McKinsey Way. McGraw-Hill; 1999.
[12] Haimes, Yacov Y., Stan Kaplan, and James H. Lambert. "Risk filtering, ranking, and management framework using hierarchical
holographic modeling." : Risk Analysis 22.2 ; 2002, p.383-397.

